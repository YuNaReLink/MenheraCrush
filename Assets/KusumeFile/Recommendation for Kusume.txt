




全般
・コメントアウトの記入
・確実に同時に使うコンポーネントの要求(例："Piece"にて"CircleCollider2D"を要求する)
・プレハブとして扱う変数の明確化(例："CreatePieceMachine"の"basePiece"を"piecePrefab"に変更)
・シングルトンクラスの扱い
→・メンバー変数としての宣言の削除(都度"Instance"などで取得すれば済むため)
　・"Instance"の呼び出し回数の削減(ローカル変数に代入すれば文字数が削減できるため)





TestBack
・ファイル及び適用済みプレハブ、オブジェクトの削除





BaseMenheraController
・名称の変更
→・クラス名を"MenheraController"に変更(継承先のクラス名には"Menhera"が含まれず、この単語に『基礎』の意味を付加できるため)
　・メソッド"SetMenheraUI"を"Initialize"及び類する語に変更(Set系メソッドとの混用を防ぐため)
　・変数"charaInt"を"num"や"index"に変更、並びに関連するプロパティ名、メソッド名の変更("Int"では型名を表すだけになり、その値が何に使用されるかを示しているわけではないため/クラス名が持つ意味である"chara"の部分が重複するため)





EnemyController
・メソッド"Attack"内部での行動処理にある乱数の排除、及び行動パターンの作成
・変数"actionRatio"について
→・名称を"actionCount"に変更(扱いからして『割合』ではなく『全体の個数』としての変数であるため)
　・通常攻撃をスキル扱いにし、配列化したスキルの長さからの取得(これにより番号の指定によって中身が変わり、if文を省略できるため)





PlayerController
・変数"hp"をメンバ変数ではなくローカル変数として宣言(使用箇所が"Awake"内部のみであるため)
・"Awake"内部でのHP表示のUIの初期化処理をクラス"PlayerHP"側に移動(HP関連の処理をわざわざHP用のクラス以外が呼ぶ必要が無いため)
・メソッド"SetSkillRunCount"について
→・名称と実態が合っていないのでどちらかに統一(名称は『設定』なのに実態は加算しているため)
　・型名とメソッド名の間の空白を最低限まで削減(一見して変数の1つとして捉えられかねないため)
　・スキルに関する入力を扱うクラスの作成(スキルのための各変数名が無駄に長くなることを防ぐため/管理を分けてクラス1つが持つ機能を減らすため)
・メソッド"UpdateDebug"内に於いて、立ち絵の初期化のタイミングを切り替えを行った時のみに変更(不必要な初期化を削減するため)
・メソッド"Update"内に於いて、ジャンプボタンを押した際のスキル発動の無効化(ボタン側で操作を行うため)
・メソッド"MouseRaycast"内に於いて、ピースの破壊を呼び出す条件を『左クリックを離している間』から『左クリックを離した時』に変更(毎フレーム呼び出す必要が無いため)





PlayerInput
・不必要なSerializeField及び変数の削除
・変数"leftMouseButton"及びプロパティの名称の変更(マウスであることよりも『なぞる』という目的の方が重要であるため/今回は違うが、スマートフォン向けの開発の際にマウスとして定義することは好ましくないため)
・"MonoBehaviour"からの継承の解除(そもそもオブジェクトに括り付けずともできる内容であるため/仮にインスペクタから編集するのであっても"Serializable"で事足りるため)





PieceContainer
・変数"controller"の削除及び必要な情報の置き換え
→・メソッド"Crush"内でのみ使われ、キャラクター番号のみで事足りるため
・メソッド"Crush"について
→・スキル用のエネルギーを加算するためにピースにプレイヤー情報を渡している部分を、加算するエネルギーの合計としてローカル変数で記録するように変更(渡さずとも同じ動きができるため)
　・forループ内でのタグの比較をループ前に行い、bool型のローカル変数で保持しておく(無駄な比較を省くため)
　・ピースの個数不足で消せない場合に早期returnをするように変更(インデントを低くするため)
　・メソッドの型をvoidからintに変更し、その1回で増えるエネルギー量を返すように変更(呼び出し元がプレイヤーであり、伝えたい先にそのまま返せるため)
・メソッド"CheckPieceList"の削除(リストに入っている時点で選択済みであり、確認の手間が無駄であるため)





PieceConcatenate
・保持する情報をプレイヤー情報からピースのリストに変更(プレイヤー情報自体は使用していないため)
・メソッド"LineConcatenate"に於いて、各点の位置の補正を"SetPositions"にて行うように変更(forループを省いてコードを短縮するため)
→・ピースの配列から座標の配列に変換する機能の実装("SetPositions"は座標の配列を引数として要求するため)





PlayerHP
・HPの値に関する変数及び変更用メソッドの引数の型の統一





IColorChanger
・プロパティの削除(インターフェースに対するアクセスが無いため)





HPRecovery
・変数"regain"の型をintからfloatに変更(HPの変数がfloat型であるため)





SameColorPieceCrush
・クラス名を"CrushSkill"などに変更
・変数"sizes"をローカル変数に変更(メソッド"Execute"の内部でしか扱わないため)





EnemyCreateBlockPiece
・クラス名とファイル名の統一
・メソッド"Create"について
→・名称を"Change"に変更(生成は行っていないため)
　・呼び出し元のループより前の時点で変更可能なピースのみを抽出(再帰処理をランダムで行う場合、運が極端に悪いと永遠に続くため)





Piece
・不必要なSerializeField及び変数、プロパティの削除
・プロパティ"GetGameObject"の削除(同じことが"gameObject"でできるため)
・メソッド"SetInit"の名称を"Init"に変更(Set系メソッドとの混用を防ぐため)
・コンポーネント"SpriteRenderer"の要求(付け忘れを防ぐため)
・SEの番号の読み取り専用での変数化(マジックナンバーを防ぐため)
・ピースの現在数を減らす処理のタイミングを"Crush"から"OnDestroy"に変更(他の手段で消した場合の減らし忘れを防ぐため)
・メソッド"OnTriggerStay"について
→・名称への"2D"の追加(現状では3Dの当たり判定として扱われるため)
　・機能自体、及びその内部でのみ扱う変数などの削除(現状で不都合も無く動いているのであれば不必要であるため)





PieceShaderController
・メソッド"SetLightSpeed"にあたる部分を、ピースの台帳などインスペクタで編集できる形に変更ないし移動(コード上で書くより変更が楽であるため)
・変数"spriteRenderer"の削除(マテリアルの取得以外の用途が無いため)
・メソッド"MaterialSin"の名称を"UpdateLight"などに変更(名詞を並べただけでは処理に付ける名前として不適当であるため)





ImpactObject
・当たり判定のトリガー化のタイミングをコンポーネント取得の直後に変更(タイムラグが不必要であるため)





OutsideStage
・生存可能なY座標のみを変数として記録するように変更(カメラ位置は変更されず、毎フレームの再計算が無駄であるため)
・メソッド"OnTriggerExit2D"の実装(ピース全てを監視するより、ピースの生存を許可する範囲から外れた時に破棄する方が労力が少ないため)





CreatePieceMachine
・列挙体"PieceTag"のファイル分割(どこで何を定義しているかがファイル名からわかりやすくなるため)
・クラス名の変更(動詞としか解釈できない単語を名詞のように扱うと混乱が生じるため)
・生成クラスと管理クラスの分離(1つのクラスに機能を持たせすぎることを防ぐため)
・変数"pieceSpawnPosition"の型をTransformからVector2に変更(座標の取得のみを行っているため)
・メソッド"CheckAllPiece"の削除(ピース除去の度にリストから削除すれば済むため)





GamePreparationData
・変数"pieceMachine"の型の変更(GameObject型では異物も入れられてしまうため)





MenheraData
PieceDataList
SkillButtonColorDataList
StageInfoData
・継承元を"ScriptableObject"から"LedgerBase"に変更(既存のクラスで実装できるため)





ButtonColors
・変数"colors"の型を"ColorBlock"型に変更(Unity内でのボタンの色をまとめて扱うための構造体であるため)





SetEnemy
・クラス名を"EnemySelector"などに変更(クラス名を動詞で始めると混乱と笑いが生じるため)
・メソッド"Set"の名称を"Execute"などに変更(Set系メソッドとの混用を防ぐため)





SetStageInfoData
・クラス名の変更(同上)
・変数"gameCanvasTransform"並びに"gameStartObject"の型の変更(異物が入る可能性があるため)





GameController
・クラス名を"GameManager"などに変更(操作関連の処理を行っていないため)





GameStarter
・メソッド"Destroy"の名称を"End"などに変更(Unity側の機能と名前が被るため)





MenuSystem
・メソッド"Start"の削除(クリックイベントはインスペクタ上で設定すれば済むため)





Timer
・空のコンストラクタの追加、或いは引数のデフォルト値を0に設定(引数無しでインスタンス化できる方が利便性が高く、直感的に0で終わる方が分かりやすいため)
・メソッド"AddCurrent"の名称を"Delay"や"Extend"に変更(『現在値に加算』という事実より、『遅延』『延長』など、それを以て何がしたいかを名称にした方が読みやすいため)
・終了について
→・メソッド"IsEnd"内にて、ループするなら確実にfalseを返すように変更(Updateの処理後に"current"がマイナスになった場合、ループが機能しなくなるため)
　・メソッド"Update"内にある早期returnの条件にて"IsEnd"を使うように変更(上記の変更を適用するため)
・表示について
→・分：秒の文字列化をクラス内で実装(外部から取得する際の手間の削減のため)
　・秒が変わった時に表示用テキストの文字列を変更するように変更(変換を挟む都合上、処理回数を減らすため)
　・イベント『秒が変わった時』の作成、及び上記処理の登録(コードにて中継をする必要が減るため)





